from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
import unittest


class VisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser = webdriver.Firefox()
        self.browser.implicitly_wait(3)

    def tearDown(self):
        self.browser.quit()

    def test_user_can_open_site_and_navigate(self):
        # user opens the site
        self.browser.get('http://localhost:8000/urly')

        # they see a website with urly-bird' in the title
        self.assertIn('Urly-Bird', self.browser.find_element_by_tag_name(\
                                        'h1').text)

        # they see a place to log in, a place to register
        # and some general information about trending links
        self.browser.find_element_by_id('login_link')
        self.browser.find_element_by_id('registration_link')
        self.browser.find_element_by_id('trending')

        # the user clicks a link info button to see more information
        bm = self.browser.find_element_by_class_name('bookmark')
        bmtext = bm.text
        bm.click()
        # they get a page where the see the link's information(
        # title, description), the user
        # that created the link,
##link stats and tags for that link
        self.assertEqual(self.browser.find_element_by_tag_name('h1').text, \
                         bmtext)

        pf = self.browser.find_element_by_class_name('profile')

        # the user clicks on the user that created the link
        pf.click()

        # they see a user page with user name, profile, and
        # links generated by that user
        # in reverse chronological order with tags
        self.assertEqual(self.browser.find_element_by_id('username'), pf.text)

        

## the user clicks a tag, and sees a page with links tagged
## with that tag ranked by recent clicks.


# the user backtracks to the main page and logs in
# they see their own page, similar to the user page before
# but with options to create new links, delete links, and
# edit the tags on a link.

# the user adds a new tag to their first link, 'beastly'
# the user logs out, is redirected to the main page,
# and closes the browser.
if __name__ == '__main__':
    unittest.main()#warnings='ignore')
